/*! \mainpage Описание интегрированной среды разработки ПЛК Дизайнер
 *
 * \section intro_sec Введение
 * ПЛК Дизайнер v.1 представляет собой универсальную среду разработки приложений для операторских интерфейсов, 
 * управления движением и автоматикой.
 *
 * Обеспечивая возможность быстрого, эффективного объектно-ориентированного программирования, пакет ПЛК Дизайнер использует все преимущества стандартных технологий, 
 * обеспечивая при этом полную совместимость со стандартами МЭК 61131-3.
 *
 * Все компоненты и приложения пакета ПЛК Дизайнер имеют единое рабочее пространство и единый набор инструментальных средств.
 *
 * Стандартизованный пользовательский интерфейс позволяет сократить период обучения, а интеграция новых приложений не требует изучения дополнительных принципов работы. 
 *
 * В сочетании с эффективным, удобным для пользователя дизайном все это делает пакет ПЛК Дизайнер наилучшим выбором для разработки интерфейса человек-машина, программирования ПЛК, разработки программ управления движением и управления на основе ПК.
 *
 * Сочетая лучшие традиции программных и графических приложений с эффективными открытыми технологиями на основе промышленных стандартов, пакет ПЛК Дизайнер обеспечивает легкий переход к новейшим инструментальным средствам разработки.
 *
 * \section modules_sec ...и механизмы расширения
 * Для обеспечения гибкости разработки и универсальности применения нашего продукта предусмотрена гибкая система расширений, позволяющая адаптировать ПЛК Дизайнер к требованиям даже самого взыскательного заказчика.
 * 
 * В этой документации будут раскрыты основные моменты, позволящие Вам создать множество собственных расширений.
 *
 * \subsection software_sec Структура интегрированной среды ПЛК Дизайнер
 * Для понимания, с чем вам придется столкнуться при разработке расширений, давайте рассмотрим упрощенную схему ПЛК Дизайнер:
 * \image html application.jpg
 * ПЛК Дизайнер содержит следующие компоненты:
 * \li \c Модуль \c проектов - навигатор по дереву проектов, содержащих все программные блоки, переменные и утилиты проекта
 * \li \c Модуль \c свойств - содержит уникальный интуитивно понятный инструмент редактирования значений любых параметров
 * \li \c Модуль \c компонентов - содержит богатейшую коллекцию компонентов, позволяющих с легкостью осуществить любой, даже самый сложный проект
 * \li \c Модуль \c справки \c и \c консоли - отображает подробнейшую информацию о всех компонентах, свойствах и переменных, делая работу с системой по-настоящему легкой и приятной.
 * \li \c Плагины \c редактирования - набор плагинов редактирования, позволяющих управлять функциями и программами, написанными на любом поддерживаемом языке

 * Для добавления поддержки нового языка нужно всего лишь создать собственный плагин редактирования. 
 * Не беспокойтесь - это очень просто!
 *\subsection interfaces_sec Интерфейсы плагина
 * Плагин редактирования представляет собой библиотеку, а точнее - QtPlugin. Для встраивания в систему плагину достаточно реализовать один из интерфейсов:
 * \li \c ModuleInterface - простейший интерфейс, возможностей которого, однако, достаточно для большинства применений. Если вам нужно лишь позволить пользователю редактировать программный блок и не нужен доступ к переменным или библиотеке компонентов, то  ModuleInterface идеален для вас.
 * \li \c EditorInterface - более сложный, чем ModuleInterface, однако обеспечивает полный контроль над переменными, свойствами и компонентами. Данный интерфейс отлично подходит для реализации собственных редакторов.
 * \li \c CreatorInterface - специфический интерфейс, позволяющий получить доступ к дереву проектов, добавлять и удалять ветви, изменять иконки. Этот интерфейс - лучший выбор для реализации продвинутых средств настройки.
 *
 *\section plugin_sec Структура плагина
 * Любой плагин редактирования состоит из нескольких частей:
  * \li \c Тело \c плагина - инициализируется при загрузке модуля в момент запуска ПЛК Дизайнер
  * \li \c Кнопки \c инструментов \c плагина - встраиваются в панель инструментов ПЛК Дизайнер
  * \li \c Контекстное \c меню \c плагина - встраиваются в навигатор проектов ПЛК Дизайнер
  * \li \c Виджет \c редактирования - показывается при открытии программного блока в навигаторе ПЛК Дизайнер
*
* Рассмотрим подробнее перечисленные составные части.
*\subsection body_subsec Тело плагина
* Тело плагина представляет собой объект класса-наследника QObject и выбранного интерфейса (\ref interfaces_sec)
* 
* Инициализация тела плагина производится следующим образом
  * \li Запрашивается имя плагина путем вызова метода ModuleInterface::name() 
  * \li Запрашивается информация о версии, дате сборке и авторе плагина
  * \li Вызывается метод инициализации - ModuleInterface::init () или EditorInterface::init (cPropertiesProvider *props) в зависимости от типа плагина
  * \li Запрашивается иконка путем вызова метода ModuleInterface::icon() 
  * \li Запрашивается список типов порграммных блоков, которые способен открывать плагин. Список запрашивается путем вызова метода ModuleInterface::fileType() 
  * \li Запрашивается список кнопок панели инструментов путем вызова метода ModuleInterface::action() 
  * \li Запрашивается список контекстного меню путем вызова метода ModuleInterface::contextMenuAction() 
*
*\subsection toolbar_subsec Кнопки инструментов плагина
* Каждый модуль может определить список кнопок, которые будут добавлены на панель инструментов ПЛК Дизайнер.\n
* Список кнопок запрашивается на этапе инициализации тела плагина в момент вызова метода ModuleInterface::action() 
*
* Кнопки предназначены для запуска диалогов настройки плагина, обновления, связи с устройствами, или для действий, специфичных для данного редактора.
* \subsection context_subsec Контекстное меню 
* Каждый модуль может определить список действий контекстного меню, которые будут добавлены в навигатор проектов для всех программных блоков, обрабатываемых данным плагином. \n
* Список кнопок запрашивается на этапе инициализации тела плагина в момент вызова метода ModuleInterface::contextMenuAction() 
* \subsection widget_subsec Виджет редактирования
* При открытии программного блока открывается виджет, возвращаемый методом QWidget * ModuleInterface::widget (QDomNode root,QVariant props) или QWidget * EditorInterface::widget (QDomNode root, QVariant props, cVariablesProvider* variablesProvider, cElementProvider *elementsProvider) в зависимости от выбранного типа интерфейса.\n
* В качестве параметров виджета передаётся текущее окружение редактируемого программного блока, настройки виджета и, опционально, интерфейсы управления переменными и библиотечными компонентами.
* Пример простейшего виджета показан в SampleWidget.h
*
* При изменении пользователем свойств редактируемого программного блока, виджет должен установить в true значение свойства modified. @see SampleWidget::modified
* В случае, если при закрытии виджета свойство modified равно true, то пользователю будет предложено выбрать, необходимо ли сохранить состояние программного блока. В случае положительного ответа, у виджета будет вызван слот save() @see SampleWidget::save()
*
* При выборе пользователем элемента, обладающего редактируемыми свойствами, виджет обязан излучить сигнал void SampleWidget::elementSelected(QString name, QVariantMap props) или void SampleWidget::elementSelected(QString name, QMap<QString, cAbstractProperty*> props) в зависимости от типов свойств элементов.\n
* При изменении пользователем свойств элемента, его новая карта свойств будет передана в слот void SampleWidget::propertyChanged(QString name, QVariantMap props) или void SampleWidget::propertyChanged(QString name, QMap<QString, cAbstractProperty*> props)
*
* Для расширения возможностей по интеграции виджета в среду ПЛК Дизайнер, он может быть унаследован от нескольких интерфейсов, позволяющих реагировать на действия пользователей:
* \li IEditable - управление основными функциями правки
* \li IElementsControllable - выделение элементов
* \li ISearchable - поиск элементов
* \li IVerifiable - проверка программного блока
* \li IPrintable - печать документов

* и.т.д.
*/